% This program is designed to train 6 networks based on data stored in 6
% datasets called: out_0, out_1, out_2, out_5, out_10, out_100. 
% These data sets are generated by the Rossler_model program and each set 
% corresponds to a different level of added noise. The noise level is also 
% encoded in the variable name. For example:
%   - out_1 corresponds to a noise amplitude of 0.001
%   - out_10 corresponds to a noise amplitude of 0.01
%   - out_100 corresponds to a noise amplitude of 0.1
%
% This program will work correctly only if these 6 datasets with exact 
% names exist in the MATLAB workspace. If not, you must generate them 
% using the Rossler_model program and save the output using appropriate names.

%Getting parameters from another file
run('Rossler_LSTM_training_params_noise.m');

%Subsequent values of noise level (multiplied by 1000 to avoid dots in name of file)
NoiseLevel = [0, 1, 2, 5, 10, 100];


for i = 1:length(NoiseLevel)
    out = eval(sprintf('out_%d', NoiseLevel(i)));
    
    %Writing data from Simulink ports to variables
    x = out.yout{1}.Values.Data;
    y = out.yout{2}.Values.Data;
    z = out.yout{3}.Values.Data;

    %Preparing data for network
    inputSeq = [x, y, z];
    outputSeq = x(2:end);
    inputSeq = inputSeq(1:end-1, :);
    
    XTrain = {inputSeq'};
    YTrain = {outputSeq'};
    
    %Building LSTM network
    layers = [
        sequenceInputLayer(3)
        lstmLayer(LSTM_neurons, 'OutputMode', 'sequence')
        fullyConnectedLayer(1)
        regressionLayer];
    
    %Training options
    options = trainingOptions('adam', ...
        'MaxEpochs', epochs, ...
        'GradientThreshold', 1, ...
        'InitialLearnRate', 0.005, ...
        'Verbose', 0, ...
        'Plots', 'training-progress');
    
    %Training network
    net = trainNetwork(XTrain, YTrain, layers, options);
    
    %Writing network to file for later testing
    name_of_network = sprintf('LSTM_30_70_90_%d_100k', NoiseLevel(i));
    save([name_of_network '.mat'], 'net');
end